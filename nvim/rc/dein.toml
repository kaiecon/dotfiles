# originalrepo = on github

[[plugins]]
repo = 'Shougo/vimproc'
build = 'make'

[[plugins]]
repo = 'easymotion/vim-easymotion'

# [[plugins]]
# repo = 'Shougo/unite.vim'

# [[plugins]]
# repo = 'Shougo/vimfiler.vim'
# hook_add = '''
#     let g:vimfiler_as_default_explorer=1
#     let g:vimfiler_enable_auto_cd = 1
#     nnoremap <leader>f :VimFilerExplorer <CR>
# '''

# [[plugins]]
# repo = 'Shougo/neocomplete.vim'

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
    let g:ale_linter = {
      \   'python': ['autopep8'],
      \ }
    let g:ale_fixers = {
      \   'python' : ['yapf'],
      \   'javascript': ['eslint'],
      \   'cpp': ['clang-format'],
      \ }
    let g:ale_fix_on_save = 1
    let g:ale_sign_column_always = 1
'''

[[plugins]]
repo = 'suan/vim-instant-markdown'

[[plugins]]
repo = 'kannokanno/previm'

[[plugins]]
repo = 'tyru/open-browser.vim'

[[plugins]]
repo = 'jonathanfilip/vim-lucius'

[[plugins]]
repo = 'Lokaltog/powerline-fontpatcher'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'Yggdroot/indentLine'

[[plugins]]
repo = 'ujihisa/unite-colorscheme'

[[plugins]]
repo = 'akiomik/itermcolors-vim'

[[plugins]]
repo = 'alpaca-tc/alpaca_powertabline'

[[plugins]]
repo = "tyru/caw.vim.git"
hook_add = '''
    nmap <Leader>c <Plug>(caw:zeropos:toggle)
    vmap <Leader>c <Plug>(caw:zeropos:toggle)
'''

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
    let g:lightline = {
        \ 'colorscheme': 'onedark',
        \ 'mode_map': {'c': 'NORMAL'},
        \ 'active': {
        \   'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'filename' ] ]
        \ }, 
        \ 'component': {
        \   'readonly': '%{&readonly?"x":""}'
        \ },
        \ 'component_function': {
        \   'modified': 'LightlineModified',
        \   'readonly': 'LightlineReadonly',
        \   'fugitive': 'LightlineFugitive',
        \   'filename': 'LightlineFilename',
        \   'fileformat': 'LightlineFileformat',
        \   'filetype': 'LightlineFiletype',
        \   'fileencoding': 'LightlineFileencoding',
        \   'mode': 'LightlineMode'
        \ },
        \ 'separator': { 'left': "\ue0b0", 'right': "\ue0b2" },
        \ 'subseparator': { 'left': "\ue0b1", 'right': "\ue0b3" }
        \ }
    function! LightlineModified()
      return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
    endfunction

    function! LightlineReadonly()
      return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? 'x' : ''
    endfunction

    function! LightlineFilename()
      return ('' != LightlineReadonly() ? LightlineReadonly() . ' ' : '') .
            \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
            \  &ft == 'unite' ? unite#get_status_string() :
            \  &ft == 'vimshell' ? vimshell#get_status_string() :
            \ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
            \ ('' != LightlineModified() ? ' ' . LightlineModified() : '')
    endfunction

    function! LightlineFugitive()
      if &ft !~? 'vimfiler\|gundo' && exists('*fugitive#head')
        return fugitive#head()
      else
        return ''
      endif
    endfunction

    function! LightlineFileformat()
      return winwidth(0) > 70 ? &fileformat : ''
    endfunction

    function! LightlineFiletype()
      return winwidth(0) > 70 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
    endfunction

    function! LightlineFileencoding()
      return winwidth(0) > 70 ? (&fenc !=# '' ? &fenc : &enc) : ''
    endfunction

    function! LightlineMode()
      return winwidth(0) > 60 ? lightline#mode() : ''
    endfunction
'''

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
    let g:quickrun_config = get(g:, 'quickrun_config', {})
    let g:quickrun_config._ = {
          \ 'runner'    : 'vimproc',
          \ 'runner/vimproc/updatetime' : 60,
          \ 'outputter' : 'error',
          \ 'outputter/error/success' : 'buffer',
          \ 'outputter/error/error'   : 'quickfix',
          \ 'outputter/buffer/split'  : ':rightbelow 8sp',
          \ 'outputter/buffer/close_on_empty' : 1,
          \ }
    let g:quickrun_config.cpp = {
          \ 'command' : 'clang++',
          \ 'cmdopt' : '-std=c++14',
          \ }
    let g:quickrun_config.python = {
          \ 'command' : 'python3',
          \ }
'''

[[plugins]]
repo = 'davidhalter/jedi-vim'

[[plugins]]
repo = 'joshdick/onedark.vim'
hook_add = '''
   augroup MyAutoCmd
       autocmd!
   augroup END
   set background=dark
   " colorscheme 設定は source 後に行う必要があるので VimEnter で行う。
   " 但し Colorscheme イベントの発生が抑制されないよう nented を付ける。
   au MyAutoCmd VimEnter * nested colorscheme onedark 
   " au MyAutoCmd ColorScheme * highlight Normal ctermbg=None
'''
## http://qiita.com/kawaz/items/ee725f6214f91337b42b

[[plugins]]
repo = 'Shougo/neoinclude.vim'

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'junegunn/vim-easy-align'

[[plugins]]
repo = 'Shougo/denite.nvim'

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'neoclide/coc.nvim'
build = './install.sh nightly'
