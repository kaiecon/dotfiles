[[plugins]]
repo = 'Shougo/vimproc'
build = 'make'

[[plugins]]
repo = 'easymotion/vim-easymotion'

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'dense-analysis/ale'
hook_add = '''
    let g:ale_fixers = {
      \ '*': ['remove_trailing_lines', 'trim_whitespace'],
      \ 'python' : ['isort', 'black'],
      \ 'javascript': ['eslint', 'prettier'],
      \ 'vue': ['eslint', 'prettier'],
      \ 'typescript': ['prettier'],
      \ 'json': ['prettier'],
      \ 'cpp': ['clang-format']
      \ }
    let g:ale_linters = {
      \ 'python': ['flake8'],
      \ 'javascript': ['eslint'],
      \ 'typescript': ['eslint'],
      \ 'json': ['jsonlint']
      \ }
    let g:ale_fix_on_save = 1
    let g:ale_sign_column_always = 1
'''

[[plugins]]
repo = 'suan/vim-instant-markdown'

[[plugins]]
repo = 'kannokanno/previm'

[[plugins]]
repo = 'tyru/open-browser.vim'

[[plugins]]
repo = 'jonathanfilip/vim-lucius'

[[plugins]]
repo = 'Lokaltog/powerline-fontpatcher'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'Yggdroot/indentLine'

[[plugins]]
repo = 'ujihisa/unite-colorscheme'

[[plugins]]
repo = 'akiomik/itermcolors-vim'

[[plugins]]
repo = 'alpaca-tc/alpaca_powertabline'

[[plugins]]
repo = "tyru/caw.vim.git"
hook_add = '''
    nmap <Leader>c <Plug>(caw:zeropos:toggle)
    vmap <Leader>c <Plug>(caw:zeropos:toggle)
'''

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
    let g:lightline = {
      \ 'colorscheme': 'onedark',
      \ 'mode_map': { 'c': 'NORMAL' },
      \ 'component': { 'readonly': '%{&readonly?"x":""}' },
      \ 'separator': { 'left': "ÓÇ∞", 'right': "ÓÇ≤" },
      \ 'subseparator': { 'left': "ÓÇ±", 'right': "ÓÇ≥" }
      \ }
    let g:lightline.component_function = {
      \ 'modified': 'LightlineModified',
      \ 'readonly': 'LightlineReadonly',
      \ 'fugitive': 'LightlineFugitive',
      \ 'filename': 'LightlineFilename',
      \ 'fileformat': 'LightlineFileformat',
      \ 'filetype': 'LightlineFiletype',
      \ 'fileencoding': 'LightlineFileencoding',
      \ 'mode': 'LightlineMode',
      \ 'cocstatus': 'coc#status'
      \ }
    let g:lightline.component_expand = {
      \ 'linter_checking': 'lightline#ale#checking',
      \ 'linter_warnings': 'lightline#ale#warnings',
      \ 'linter_errors': 'lightline#ale#errors',
      \ 'linter_ok': 'lightline#ale#ok',
      \ }
    let g:lightline#ale#indicator_checking = "ü§î"
    let g:lightline#ale#indicator_warnings = "‚ùó"
    let g:lightline#ale#indicator_errors = "‚ùå"
    let g:lightline#ale#indicator_ok = "‚úÖ" 
    let g:lightline.component_type = {
      \ 'linter_checking': 'left',
      \ 'linter_warnings': 'warning',
      \ 'linter_errors': 'error',
      \ 'linter_ok': 'left',
      \ }
    let g:lightline.active = {
      \ 'left': [ [ 'mode', 'paste' ], 
      \           [ 'fugitive', 'readonly', 'filename', 'modified' ],
      \           [ 'linter_checking', 'linter_errors', 'linter_warnings', 'linter_ok' ] ]
      \ }
    function! LightlineModified()
      return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
    endfunction

    function! LightlineReadonly()
      return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? 'x' : ''
    endfunction

    function! LightlineFilename()
      return ('' != LightlineReadonly() ? LightlineReadonly() . ' ' : '') .
            \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
            \  &ft == 'unite' ? unite#get_status_string() :
            \  &ft == 'vimshell' ? vimshell#get_status_string() :
            \ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
            \ ('' != LightlineModified() ? ' ' . LightlineModified() : '')
    endfunction

    function! LightlineFugitive()
      if &ft !~? 'vimfiler\|gundo' && exists('*fugitive#head')
        return fugitive#head()
      else
        return ''
      endif
    endfunction

    function! LightlineFileformat()
      return winwidth(0) > 70 ? &fileformat : ''
    endfunction

    function! LightlineFiletype()
      return winwidth(0) > 70 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
    endfunction

    function! LightlineFileencoding()
      return winwidth(0) > 70 ? (&fenc !=# '' ? &fenc : &enc) : ''
    endfunction

    function! LightlineMode()
      return winwidth(0) > 60 ? lightline#mode() : ''
    endfunction
'''

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
    let g:quickrun_config = get(g:, 'quickrun_config', {})
    let g:quickrun_config._ = {
          \ 'runner'    : 'vimproc',
          \ 'runner/vimproc/updatetime' : 60,
          \ 'outputter' : 'error',
          \ 'outputter/error/success' : 'buffer',
          \ 'outputter/error/error'   : 'quickfix',
          \ 'outputter/buffer/split'  : ':rightbelow 8sp',
          \ 'outputter/buffer/close_on_empty' : 1,
          \ }
    let g:quickrun_config.cpp = {
          \ 'command' : 'clang++',
          \ 'cmdopt' : '-std=c++14',
          \ }
    let g:quickrun_config.python = {
          \ 'command' : 'python3',
          \ }
'''

[[plugins]]
repo = 'joshdick/onedark.vim'
hook_add = '''
   augroup MyAutoCmd
       autocmd!
   augroup END
   set background=dark
   " colorscheme Ë®≠ÂÆö„ÅØ source Âæå„Å´Ë°å„ÅÜÂøÖË¶Å„Åå„ÅÇ„Çã„ÅÆ„Åß VimEnter „ÅßË°å„ÅÜ„ÄÇ
   " ‰ΩÜ„Åó Colorscheme „Ç§„Éô„É≥„Éà„ÅÆÁô∫Áîü„ÅåÊäëÂà∂„Åï„Çå„Å™„ÅÑ„Çà„ÅÜ nented „Çí‰ªò„Åë„Çã„ÄÇ
   au MyAutoCmd VimEnter * nested colorscheme onedark 
   au MyAutoCmd ColorScheme * highlight Normal ctermbg=None
'''
## http://qiita.com/kawaz/items/ee725f6214f91337b42b

[[plugins]]
repo = 'Shougo/neoinclude.vim'

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'junegunn/vim-easy-align'

[[plugins]]
repo = 'Shougo/denite.nvim'

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'Shougo/defx.nvim'
hook_add = '''
	autocmd FileType defx call s:defx_my_settings()
	function! s:defx_my_settings() abort
	  " Define mappings
	  nnoremap <silent><buffer><expr> <CR>
	  \ defx#do_action('drop')
	  nnoremap <silent><buffer><expr> c
	  \ defx#do_action('copy')
	  nnoremap <silent><buffer><expr> m
	  \ defx#do_action('move')
	  nnoremap <silent><buffer><expr> p
	  \ defx#do_action('paste')
	  nnoremap <silent><buffer><expr> l
	  \ defx#do_action('drop')
	  nnoremap <silent><buffer><expr> E
	  \ defx#do_action('open', 'vsplit')
	  nnoremap <silent><buffer><expr> P
	  \ defx#do_action('preview')
	  nnoremap <silent><buffer><expr> o
	  \ defx#do_action('open_tree', 'toggle')
	  nnoremap <silent><buffer><expr> K
	  \ defx#do_action('new_directory')
	  nnoremap <silent><buffer><expr> N
	  \ defx#do_action('new_file')
	  nnoremap <silent><buffer><expr> M
	  \ defx#do_action('new_multiple_files')
	  nnoremap <silent><buffer><expr> C
	  \ defx#do_action('toggle_columns',
	  \                'mark:indent:icon:filename:type:size:time')
	  nnoremap <silent><buffer><expr> S
	  \ defx#do_action('toggle_sort', 'time')
	  nnoremap <silent><buffer><expr> d
	  \ defx#do_action('remove')
	  nnoremap <silent><buffer><expr> r
	  \ defx#do_action('rename')
	  nnoremap <silent><buffer><expr> !
	  \ defx#do_action('execute_command')
	  nnoremap <silent><buffer><expr> x
	  \ defx#do_action('execute_system')
	  nnoremap <silent><buffer><expr> yy
	  \ defx#do_action('yank_path')
	  nnoremap <silent><buffer><expr> .
	  \ defx#do_action('toggle_ignored_files')
	  nnoremap <silent><buffer><expr> ;
	  \ defx#do_action('repeat')
	  nnoremap <silent><buffer><expr> h
	  \ defx#do_action('cd', ['..'])
	  nnoremap <silent><buffer><expr> ~
	  \ defx#do_action('cd')
	  nnoremap <silent><buffer><expr> q
	  \ defx#do_action('quit')
	  nnoremap <silent><buffer><expr> <Space>
	  \ defx#do_action('toggle_select') . 'j'
	  nnoremap <silent><buffer><expr> *
	  \ defx#do_action('toggle_select_all')
	  nnoremap <silent><buffer><expr> j
	  \ line('.') == line('$') ? 'gg' : 'j'
	  nnoremap <silent><buffer><expr> k
	  \ line('.') == 1 ? 'G' : 'k'
	  nnoremap <silent><buffer><expr> <C-l>
	  \ defx#do_action('redraw')
	  nnoremap <silent><buffer><expr> <C-g>
	  \ defx#do_action('print')
	  nnoremap <silent><buffer><expr> cd
	  \ defx#do_action('change_vim_cwd')
	endfunction
'''

[[plugins]]
repo = 'ryanoasis/vim-devicons'

[[plugins]]
repo = 'kristijanhusak/defx-icons'

[[plugins]]
repo = 'kristijanhusak/defx-git'

[[plugins]]
repo = 'neoclide/coc.nvim'
build = 'yarn install --frozen-lockfile'
hook_add = '''
  " inoremap <silent><expr> <TAB>
  "         \ pumvisible() ? "\<C-n>" :
  "         \ <SID>check_back_space() ? "\<TAB>" :
  "         \ coc#refresh()
  " inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
  " inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
  " function! s:check_back_space() abort
  "   let col = col('.') - 1
  "   return !col || getline('.')[col - 1]  =~# '\s'
  " endfunction
  " nmap <silent> gd <Plug>(coc-definition)
  " nmap <silent> gy <Plug>(coc-type-definition)
  " nmap <silent> gi <Plug>(coc-implementation)
  " nmap <silent> gr <Plug>(coc-references)
  source $XDG_CONFIG_HOME/nvim/plugins/coc-config.vim
'''

[[plugins]]
repo = 'maximbaz/lightline-ale'
